#include <iostream>
#include "mpi.h"

using namespace std;

int main(int argc, char* argv[])
{
    double start_time, end_time;

    int proc_num, proc_rank, recv_rank;
    // количество процессов, ранг текущего процесса, ранг возвращаемого процесса
    MPI_Status Status;
    //структуру данных с информацией о результате выполнения операции приема данных
    MPI_Init(&argc, &argv); 
    // Параметрами функции являются количество аргументов в командной строке и текст самой командной строки
    // Сложный тип аргументов MPI_Init предусмотрен для того, чтобы передавать всем процессам аргументы main

    start_time = MPI_Wtime(); 

    MPI_Comm_size(MPI_COMM_WORLD, &proc_num); // получение количества параллельных процессов в коммуникаторе:
    MPI_Comm_rank(MPI_COMM_WORLD, &proc_rank); // получение ранга (номера) процесса в коммуникаторе comm в диапазоне от 0 до proc_num-1
    // MPI_COMM_WORLD создается по умолчанию и представляет все процессы выполняемой параллельной программы

    if (proc_rank == 0)
    {
        cout << "\n Hello from process " << proc_rank;
        for (int i=1; i<proc_num; i++) 
        {
            MPI_Recv(&recv_rank, 1, MPI_INT, i, MPI_ANY_TAG, MPI_COMM_WORLD, &Status);
            //первые три – аналогично MPI_Send
            //ранг процесса, от которого должен быть выполнен прием сообщения
            //тег (идентификатор) сообщения, которое должно быть принято для процесса
            //коммуникатор, в рамках которого выполняется передача данных
            //указатель на структуру данных с информацией о результате выполнения операции приема данных
            cout << "\n Hello from process " << recv_rank; 
        } 
    }
    else
    {
        // Сообщение, отправляемое всеми процессами, кроме процесса с рангом 0
        MPI_Send(&proc_rank, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
        //адрес буфера памяти, в котором располагаются данные отправляемого сообщения
        //количество элементов данных в сообщении (не байт!)
        //тип элементов данных пересылаемого сообщения
        //ранг процесса, которому отправляется сообщение (от 0 до (proc_num-1))
        //значение-тег, используемое для идентификации сообщений (целое неотрицательное число)
        //коммуникатор, в рамках которого выполняется передача данных
    }

    end_time = MPI_Wtime(); 
    double total_time = end_time - start_time;
    MPI_Finalize(); // Последней вызываемой функцией MPI обязательно должна являться функция MPI_Finalize

    if (proc_rank == 0)
    {
        cout << "\nTotal execution time: " << total_time << " seconds\n";
    }

    return 0; 
}
